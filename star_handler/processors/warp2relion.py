from pathlib import Path
from typing import Union

from .base import BaseProcessor
from ..utils.errors import FormatError, ProcessingError
from ..core.io import format_input_star, format_output_star
from ..core.transform import m_to_rln

class Warp2RelionProcessor(BaseProcessor):
    """
    Convert Warp/MotionCor2-generated STAR file to RELION format.
    
    [WORKFLOW]
    1. Validate input STAR file existence and check for Warp-specific headers
    2. Convert column naming conventions from wrp* to rln*
    3. Save the output STAR file with "_relion.star" suffix

    [PARAMETERS]
    star_file : str
        Path to input STAR file generated by Warp/MotionCor2

    [OUTPUT]
    STAR file with converted column names, saving with "_relion.star" suffix

    [EXAMPLE]
    Basic conversion:
        $ star-handler process-warp2relion -f particles.star
    """
    def __init__(self, star_file: str):
        """Initialize processor with input file.
        
        [PARAMETERS]
        star_file : str
            Path to input Warp STAR file
            
        [RAISES]
        FormatError
            If star file does not exist
        """
        super().__init__()
        self.validate_files(star_file)
        self.star_file = star_file
        
    def process(self) -> Union[str, Path]:
        """Convert Warp star file to RELION format.
        
        [OUTPUT]
        Union[str, Path]
            Path to converted RELION star file
            
        [RAISES]
        FormatError
            If input file lacks Warp-specific headers
        ProcessingError
            If conversion fails for any reason
        """
        try:
            star_data = format_input_star(self.star_file)
            particles = star_data['particles']
            
            if not any(col.startswith('wrp') for col in particles.columns):
                raise FormatError("No Warp format columns found")
                
            star_data['particles'] = m_to_rln(particles)
            output_path = self.get_output_path(self.star_file, '_relion')
            format_output_star(star_data, output_path)
            
            self.logger.info(f"Successfully converted to: {output_path}")
            return output_path
            
        except FormatError as e:
            self.logger.error(f"Format error: {str(e)}")
            raise
        except Exception as e:
            error_msg = f"Conversion failed: {str(e)}"
            self.logger.error(error_msg)
            raise ProcessingError(error_msg)
